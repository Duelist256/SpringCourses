*** Part 1 ***

XmlBeanDefinitionReader - сканирует xml и переводит в BeanDefinition'ы (объекты, хранящие
информацию о бинах)

- XmlBeanDefinitionReader парсит xml в BeanDefinition'ы.
- BeanFactory извлекает из BeanDefinition'ов определения BPP, создает их.
- С помощью созданных BPP BeanFactory настраивает остальные бины.

- Первая настройка бин пост процессорами
- Инит
- Вторая настройка бин пост процессорами
В результате: полностью настроенные объекты.

Метод Proxy.newProxyInstance() создает объект из нового класса, который он сгенерит
"на лету".

ApplicationListener слушает контекст Спринга.

Three-phase constructor
- Constructor
- @PostConstruct
- @AfterProxy

*** Part 2 ***

BeanFactoryPostProcessor - позволяет настраивать бин дефинишены до того, как создадутся
бины

IoC Container - HashMap

@Component - сделать из класса бин

ClassPathBeanDefinitionScanner - ищет бины с аннотацией Component или аннотацией, включающей
в себя компонент
Он не BPP и не BFPP, а ResourceLoaderAware
Создает BeanDefinitions из классов в аннотациями @Component

Конфигурация бинов через Java классы позволяет вносить какую-нибудь логику.
@Configuration

ConfigurationClassPostProcessor - особый BFPP, который добавляет BeanDefinitions от
бинов помеченны как @Bean
Относится также к таким аннотациям, как:
    - @Import - импорт другой JavaConfig
    - @ImportResource - импорт XML'а в JavaConfig
    - @ComponentScan

GroovyConfig